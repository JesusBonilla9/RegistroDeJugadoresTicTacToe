@page "/tablero"
@using RegistroDeJugadoresTicTacToe.Models
@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@inject MovimientosService movimientosService
@rendermode InteractiveServer

<div class="game-container">
    <h2 class="game-status">@GameStatus</h2>
    <div class="game-screen">
        <div class="game-board">
            @for (var i = 0; i < 9; i++)
            {
                var cellIndex = i;
                <button class="cell @GetPlayerClass(board[cellIndex])"
                        @onclick="() => HandleCellClick(cellIndex)"
                        disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                    @board[cellIndex]?.ToString()
                </button>
            }
        </div>

        <button class="btn btn-secondary mt-4" @onclick="RestartGame">
            Reiniciar Juego
        </button>
    </div>
</div>

@code {
    private enum PlayerType { X, O }

    [SupplyParameterFromQuery] public int PartidaId { get; set; }
    [SupplyParameterFromQuery] public int Jugador1Id { get; set; }
    [SupplyParameterFromQuery] public int Jugador2Id { get; set; }

    private string? jugador1Nombre;
    private string? jugador2Nombre;

    private Partidas partida;
    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;

    protected override async Task OnInitializedAsync()
    {
        var jugadores = await jugadoresService.Listar(j => j.JugadorId == Jugador1Id || j.JugadorId == Jugador2Id);
        jugador1Nombre = jugadores.FirstOrDefault(j => j.JugadorId == Jugador1Id)?.Nombre ?? "Jugador X";
        jugador2Nombre = jugadores.FirstOrDefault(j => j.JugadorId == Jugador2Id)?.Nombre ?? "Jugador O";

        partida = await partidasService.Buscar(PartidaId) ?? new Partidas();
    }

    private string GameStatus
    {
        get
        {
            if (winner != null)
            {
                var ganadorNombre = (winner == PlayerType.X) ? jugador1Nombre : jugador2Nombre;
                return $"🏆 ¡Ganador: {ganadorNombre} ({winner})!";
            }
            if (esEmpate)
                return "🤝 ¡Es un empate!";
            var turnoNombre = (_currentPlayerType == PlayerType.X) ? jugador1Nombre : jugador2Nombre;
            return $"Turno de: {turnoNombre} ({_currentPlayerType})";
        }
    }

    private async Task HandleCellClick(int index)
    {
        if (board[index] != null || winner != null || esEmpate) return;

        board[index] = _currentPlayerType;

        // GUARDAR MOVIMIENTO
        var fila = index / 3;
        var columna = index % 3;
        var jugadorActualId = (_currentPlayerType == PlayerType.X) ? Jugador1Id : Jugador2Id;

        var movimiento = new Movimientos
        {
            PartidaId = PartidaId,
            JugadorId = jugadorActualId,
            PosicionFila = fila,
            PosicionColumna = columna,
            FechaMovimiento = DateTime.Now
        };

        await movimientosService.Guardar(movimiento);

        // ACTUALIZAR ESTADO DE PARTIDA
        partida.EstadoTablero = string.Concat(board.Select(c => c?.ToString() ?? "-"));
        partida.TurnoJugadorId = (_currentPlayerType == PlayerType.X) ? Jugador2Id : Jugador1Id;
        await partidasService.Guardar(partida);

        
        winner = CheckForWinner();
        if (winner != null)
        {
            partida.EstadoPartida = "Finalizada";
            partida.GanadorId = (winner == PlayerType.X) ? Jugador1Id : Jugador2Id;
            partida.FechaFin = DateTime.Now;

            await jugadoresService.ActualizarEstadisticasFinPartida(Jugador1Id, Jugador2Id, partida.GanadorId);

            await partidasService.Guardar(partida);
            return;
        }

        
        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            partida.EstadoPartida = "Empatada";
            partida.GanadorId = null;
            partida.FechaFin = DateTime.Now;

            await jugadoresService.ActualizarEstadisticasFinPartida(Jugador1Id, Jugador2Id, null);

            await partidasService.Guardar(partida);
            return;
        }
        _currentPlayerType = (_currentPlayerType == PlayerType.X) ? PlayerType.O : PlayerType.X;
    }


    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
            new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},
            new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},
            new[] {0, 4, 8}, new[] {2, 4, 6}
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
                return board[a];
        }
        return null;
    }

    private void RestartGame()
    {
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
}


