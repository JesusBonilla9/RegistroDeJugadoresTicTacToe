@page "/Jugadores/Index"
@inject JugadoresService jugadoresService
@rendermode InteractiveServer

<PageTitle>Index de Jugadores</PageTitle>

<div class="container">
    <div class="card shadow-lg">

        @* Encabezado con título y botón Crear *@
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Index de Jugadores</h5>
            <a href="/Jugadores/Create" class="btn btn-primary">
                <i class="bi bi-plus-square"></i> Crear
            </a>
        </div>


        <div class="card-body">
            @*Sección de filtros*@
            <div class="row align-items-end mb-3">
                <div class="col-3">
                    <label class="form-label"><strong>Filtrar por</strong></label>
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opción</option>
                        <option value="Nombre">Nombres</option>
                        <option value="JugadorId">JugadorId</option>
                        <option value="Victorias">Victorias</option>
                        <option value="Derrotas">Derrotas</option>
                        <option value="Empates">Empates</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <label class="form-label"><strong>Búsqueda</strong></label>
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                        <button type="button" class="btn btn-outline-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
                    </div>
                </div>
            </div>

            <table class="table table-hover">
                <thead class="table table-striped text-black">
                    <tr>
                        <th>JugadorId</th>
                        <th>Nombres</th>
                        <th>Victorias</th>
                        <th>Derrotas</th>
                        <th>Empates</th>
                        <th>Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var jugador in ListaJugadores)
                    {
                        <tr>
                            <td>@jugador.JugadorId</td>
                            <td>@jugador.Nombre</td>
                            <td>@jugador.Victorias</td>
                            <td>@jugador.Derrotas</td>
                            <td>@jugador.Empates</td>
                            <td class="text-center">
                                <a href="/Jugadores/Edit/@jugador.JugadorId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer space-between">
            <label>Total Jugadores: @ListaJugadores.Count()</label>
            <label>Total Victorias: @ListaJugadores.Sum(j => j.Victorias)</label>
            <label>Total Derrotas: @ListaJugadores.Sum(j => j.Derrotas)</label>
            <label>Total Empates: @ListaJugadores.Sum(j => j.Empates)</label>
        </div>
    </div>
</div>

@code {
    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == nameof(Jugadores.Nombre))
            {
                ListaJugadores = await jugadoresService.Listar(
                    j => j.Nombre.ToLower().Contains(ValorFiltro.ToLower())
                );
            }
            else if (Filtro == nameof(Jugadores.JugadorId) && int.TryParse(ValorFiltro, out var id))
            {
                ListaJugadores = await jugadoresService.Listar(j => j.JugadorId == id);
            }
            else if (Filtro == nameof(Jugadores.Victorias) && int.TryParse(ValorFiltro, out var victorias))
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Victorias == victorias);
            }
            else if (Filtro == nameof(Jugadores.Derrotas) && int.TryParse(ValorFiltro, out var derrotas))
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Derrotas == derrotas);
            }
            else if (Filtro == nameof(Jugadores.Empates) && int.TryParse(ValorFiltro, out var empates))
            {
                ListaJugadores = await jugadoresService.Listar(j => j.Empates == empates);
            }
        }
        else
        {
            ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        }
    }

    private async Task Restablecer()
    {
        ListaJugadores = await jugadoresService.Listar(j => j.JugadorId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
}


