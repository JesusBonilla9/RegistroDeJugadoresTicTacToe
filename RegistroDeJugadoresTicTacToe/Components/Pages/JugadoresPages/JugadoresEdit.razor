@page "/Jugadores/Edit/{JugadorId:int}"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Modificar Jugador</PageTitle>

<EditForm Model="Jugador" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Jugador</h5>
            </div>

            <div class="card-body">
                @* Nombre *@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Jugador.Nombre" />
                    <ValidationMessage For="(() => Jugador.Nombre)" />
                </div>

                @* Partidas *@
                <div class="mb-3">
                    <label class="form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.Victorias" />
                    <ValidationMessage For="(() => Jugador.Victorias)" />
                </div>
            </div>

            @* Mostrar mensaje de éxito o error *@
            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <div class="alert @GetAlertClass()">
                    @Mensaje
                </div>
            }

            @* Footer *@
            <div class="card-footer text-center mt-2">
                <a href="/Jugadores/Index" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Modificar</button>
                <button type="button" class="btn btn-danger bi bi-trash" @onclick="MostrarModalEliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@* Modal de confirmación de eliminación *@
@if (MostrarModal)
{
    <div class="modal show" tabindex="-1" style="display: block;" aria-labelledby="confirmDeleteModalLabel" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CerrarModalEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar al jugador?</p>
                    <p><strong>JugadorId:</strong> @Jugador.JugadorId</p>
                    <p><strong>Nombre:</strong> @Jugador.Nombre</p>
                    <p><strong>Partidas:</strong> @Jugador.Victorias</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Volver</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int JugadorId { get; set; }

    public Jugadores Jugador { get; set; } = new Jugadores();
    public string Mensaje { get; set; } = string.Empty;

    private bool MostrarModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Jugador = await jugadoresService.Buscar(JugadorId);
    }

    public async Task Modificar()
    {
        try
        {
            var modificado = await jugadoresService.Guardar(Jugador);

            if (modificado)
            {
                Mensaje = "Se ha modificado correctamente";
                navigationManager.NavigateTo("/Jugadores/Index");
            }
            else
            {
                Mensaje = "No se ha podido modificar correctamente";
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Error: {ex.Message}";
        }
    }

    private async Task Eliminar()
    {
        try
        {
            var eliminado = await jugadoresService.Eliminar(Jugador.JugadorId);

            if (eliminado)
            {
                Mensaje = "Se ha eliminado correctamente";
                navigationManager.NavigateTo("/Jugadores/Index");
            }
            else
            {
                Mensaje = "No se ha podido eliminar correctamente";
            }
            CerrarModalEliminar(); 
        }
        catch (Exception ex)
        {
            Mensaje = $"Error: {ex.Message}";
        }
    }

    private void MostrarModalEliminar()
    {
        MostrarModal = true; 
    }

    private void CerrarModalEliminar()
    {
        MostrarModal = false; 
    }

    private string GetAlertClass()
    {
        return string.IsNullOrEmpty(Mensaje) || Mensaje.Contains("No se pudo") ? "alert-danger" : "alert-success";
    }
}
