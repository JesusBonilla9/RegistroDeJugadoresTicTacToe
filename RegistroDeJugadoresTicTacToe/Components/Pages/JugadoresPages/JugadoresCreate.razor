@page "/Jugadores/Create"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Jugador</PageTitle>

<EditForm Model="Jugador" OnValidSubmit="Guardar" FormName="CrearJugadoresForm">
    <DataAnnotationsValidator />

    <div class="container mt-4">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Jugador</h5>
            </div>

            <div class="card-body">

                @* Nombre *@
                <div class="mb-3">
                    <label class="form-label"><strong>Nombre</strong></label>
                    <InputText class="form-control" @bind-Value="Jugador.Nombre" />
                    <ValidationMessage For="(() => Jugador.Nombre)" />
                </div>

                @* Partidas *@
                <div class="mb-3">
                    <label class="form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="Jugador.Victorias" />
                    <ValidationMessage For="(() => Jugador.Victorias)" />
                </div>
            </div>

            @* Mostrar mensaje de validación o éxito *@
            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <div class="alert @GetAlertClass()">
                    @Mensaje
                </div>
            }

            @* Footer *@
            <div class="card-footer text-center mt-3">
                <a href="/Jugadores/Index" class="btn btn-secondary"> <span class="bi bi-arrow-left"></span> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Jugadores Jugador { get; set; } = new Jugadores();
    public string Mensaje { get; set; } = string.Empty;
    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.Listar(d => d.JugadorId > 0);
    }

    public async Task Guardar()
    {
        try
        {
            var creado = await jugadoresService.Guardar(Jugador);

            if (creado)
            {
                Mensaje = "Jugador Guardado Correctamente";
                navigationManager.NavigateTo("/Jugadores/Index");
            }
            else
            {
                Mensaje = "No se pudo guardar correctamente";
            }
        }
        catch (Exception ex)
        {
            Mensaje = ex.Message; 
        }
    }

    private string GetAlertClass()
    {
        return string.IsNullOrEmpty(Mensaje) || Mensaje.Contains("No se pudo") ? "alert-danger" : "alert-success";
    }
}